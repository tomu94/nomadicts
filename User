import UIKit
import SwiftUI
//import CountryPicker
//import FirebaseFirestoreSwift

////Here is an example of the User model for my app, Nomadicts. Some of the code is unused at the moment as I want to add features in the future that will use the information.

struct User: Identifiable, Codable {
    @DocumentID var id: String?
    
//    Device location recoreded on app launch
    let country: String
    let locality: String
    let lastKnownTimestamp: Date

//    search types user is visible in
    let friends: Bool?
    let dates: Bool?
    let business: Bool?
    
//    profile info
    let uid: String
    let completeSignUp: Bool
    let firstName: String
    let dob: Date
    var age: Int {
        dob.years(from: Date())
    }
    let gender: String
    let job: String
    let bio: String?
    let nationalityCode: String?
    let countriesVisited: Int?
    let favorite: String?
    let instagram: String?
    
//    genders selected in dates
    let datesBoys: Bool?
    let datesGirls: Bool?
    let datesOthers: Bool?
    
//    matches
    var matchedFriends: Bool?
    var matchedDates: Bool?
    var matchedBusiness: Bool?
    
//    notifications
    let token: String
    
//    used to ensure only the top card on the stack opens the profile view amongst other uses.
    var stackID: Int?
    
//    users images with an array for slideshow on profile
    let imageURL1: String
    let imagefilename1: String?
    let imageURL2: String?
    let imagefilename2: String?
    let imageURL3: String?
    let imagefilename3: String?
    
    var imageURLArray: [String] {
        var array = [imageURL1]
        if imageURL2 != nil && imageURL2 != "" {
            array.append(imageURL2!)
        }
        if imageURL3 != nil && imageURL3 != "" {
            array.append(imageURL3!)
        }
        return array
    }
    
//    used to present a user's nationality on their card/profile
    var nationality: String? {
        guard nationalityCode != nil && nationalityCode != "" else { return nil }
        let country = CountryPicker.Country(countryCode: nationalityCode!)
        return country.countryName
    }
    
    var nationalityFlag: UIImage? {
        guard nationalityCode != nil && nationalityCode != "" else { return nil }
        let country = CountryPicker.Country(countryCode: nationalityCode!)
        return country.flag
    }
    
//    travel plans
    let country1: String?
    let moveDate1: Date?
    let country2: String?
    let moveDate2: Date?
    let country3: String?
    let moveDate3: Date?
    let country4: String?
    let moveDate4: Date?
    let country5: String?
    let moveDate5: Date?
    let futureCountries: [String]?
    
    var formattedMoveDate1: String {
        if moveDate1 != nil {
            return moveDate1!.formatted(.dateTime.day().month())
        } else {
            return ""
        }
    }
    var formattedMoveDate2: String {
        if moveDate2 != nil {
            return moveDate2!.formatted(.dateTime.day().month())
        } else {
            return ""
        }
    }
    var formattedMoveDate3: String {
        if moveDate3 != nil {
            return moveDate3!.formatted(.dateTime.day().month())
        } else {
            return ""
        }
    }
    var formattedMoveDate4: String {
        if moveDate4 != nil {
            return moveDate4!.formatted(.dateTime.day().month())
        } else {
            return ""
        }
    }
    var formattedMoveDate5: String {
        if moveDate5 != nil {
            return moveDate5!.formatted(.dateTime.day().month())
        } else {
            return ""
        }
    }
    
//    used if a user chooses to delete a country from their travel plan - if the country's move date equals the default date, I know to ignore it. ToDo: Delete the country and moveDate in question from the user doc instead of relying on the default date.
    var defaultDate: Date {
        var dateComponents = DateComponents()
        dateComponents.year = 2010
        dateComponents.month = 1
        dateComponents.day = 1
        dateComponents.timeZone = TimeZone(abbreviation: "UTC")
        dateComponents.hour = 0
        dateComponents.minute = 00
        let userCalendar = Calendar(identifier: .gregorian)
        return userCalendar.date(from: dateComponents)!
    }
    
//    used to understand where the user is up to in their travel plan, update their profile accordingly and help autofill their travel plan when updating it.
    var whereAreThey: String {
        if whichDatePassed == 0 {
            return "noTravel"
        }
        if whichDatePassed == 1 && country1 == country {
            return "confirmed1"
        }
        if whichDatePassed == 2 && country2 == country {
            return "confirmed2"
        }
        if whichDatePassed == 3 && country3 == country {
            return "confirmed3"
        }
        if whichDatePassed == 4 && country4 == country {
            return "confirmed4"
        }
        if whichDatePassed == 5 && country5 == country {
            return "confirmed5"
        }
        if moveDate1 != nil {
            if whichDatePassed == 1 && country1 != country && lastKnownTimestamp < moveDate1! {
                return "unconfirmed1"
            }
            if whichDatePassed == 1 && country1 != country && lastKnownTimestamp > moveDate1! {
                return "passed1"
            }
        }
        if moveDate2 != nil {
            if whichDatePassed == 2 && country2 != country && lastKnownTimestamp < moveDate2! {
                return "unconfirmed2"
            }
            if whichDatePassed == 2 && country2 != country && lastKnownTimestamp > moveDate2! {
                return "passed2"
            }
        }
        if moveDate3 != nil {
            if whichDatePassed == 3 && country3 != country && lastKnownTimestamp < moveDate3! {
                return "unconfirmed3"
            }
            if whichDatePassed == 3 && country3 != country && lastKnownTimestamp > moveDate3! {
                return "passed3"
            }
        }
        if moveDate4 != nil {
            if whichDatePassed == 4 && country4 != country && lastKnownTimestamp < moveDate4! {
                return "unconfirmed4"
            }
            if whichDatePassed == 4 && country4 != country && lastKnownTimestamp > moveDate4! {
                return "passed4"
            }
        }
        if moveDate5 != nil {
            if whichDatePassed == 5 && country5 != country && lastKnownTimestamp < moveDate5! {
                return "unconfirmed5"
            }
            if whichDatePassed == 5 && country5 != country && lastKnownTimestamp > moveDate5! {
                return "passed5"
            }
        }
        return "unknown"
    }
    
    var whichDatePassed: Int {
        if moveDate1Passed == true && moveDate1 != defaultDate {
            if moveDate2Passed == true && moveDate2 != defaultDate {
                if moveDate3Passed == true && moveDate3 != defaultDate {
                    if moveDate4Passed == true && moveDate4 != defaultDate {
                        if moveDate5Passed == true && moveDate5 != defaultDate {
                            return 5
                        } else {
                            return 4
                        }
                    } else {
                        return 3
                    }
                } else {
                    return 2
                }
            } else {
                return 1
            }
        } else {
            return 0
        }
    }
    private var moveDate1Passed: Bool {
        if moveDate1 != nil {
            if moveDate1! < Date() {
                return true
            } else {
                return false
            }
        }
        return false
    }
    private var moveDate2Passed: Bool {
        if moveDate2 != nil {
            if moveDate2! < Date() {
                return true
            } else {
                return false
            }
        }
        return false
    }
    private var moveDate3Passed: Bool {
        if moveDate3 != nil {
            if moveDate3! < Date() {
                return true
            } else {
                return false
            }
        }
        return false
    }
    private var moveDate4Passed: Bool {
        if moveDate4 != nil {
            if moveDate4! < Date() {
                return true
            } else {
                return false
            }
        }
        return false
    }
    private var moveDate5Passed: Bool {
        if moveDate5 != nil {
            if moveDate5! < Date() {
                return true
            } else {
                return false
            }
        }
        return false
    }
    
    var whichCountryMatches: Int {
        if country5MatchesGPS == false {
            if country4MatchesGPS == false {
                if country3MatchesGPS == false {
                    if country2MatchesGPS == false {
                        if country1MatchesGPS == false {
                            return 0
                        } else {
                            return 1
                        }
                    } else {
                        return 2
                    }
                } else {
                    return 3
                }
            } else {
                return 4
            }
        } else {
            return 5
        }
    }
    private var country1MatchesGPS: Bool {
        if country1 != nil {
            if country == country1 {
                return true
            } else {
                return false
            }
        }
        return false
    }
    private var country2MatchesGPS: Bool {
        if country2 != nil {
            if country == country2 {
                return true
            } else {
                return false
            }
        }
        return false
    }
    private var country3MatchesGPS: Bool {
        if country3 != nil {
            if country == country3 {
                return true
            } else {
                return false
            }
        }
        return false
    }
    private var country4MatchesGPS: Bool {
        if country4 != nil {
            if country == country4 {
                return true
            } else {
                return false
            }
        }
        return false
    }
    private var country5MatchesGPS: Bool {
        if country5 != nil {
            if country == country5 {
                return true
            } else {
                return false
            }
        }
        return false
    }
    
    var travelPlanisUpToDate: Bool {
        if country1 == nil || moveDate1 == nil || country1 == "" || moveDate1 == defaultDate {
            return false
        }
        if whichDatePassed == 0 && whichCountryMatches == 0 {
            return true
        }
        if whichDatePassed == 1 && whichCountryMatches == 1 {
            return true
        }
        if whichDatePassed == 2 && whichCountryMatches == 2 {
            return true
        }
        if whichDatePassed == 3 && whichCountryMatches == 3 {
            return true
        }
        if whichDatePassed == 4 && whichCountryMatches == 4 {
            return true
        }
        if whichDatePassed == 5 && whichCountryMatches == 5 {
            return true
        }
        return false
    }
    
    var isCurrentUser: Bool {
        return Auth.auth().currentUser?.uid == id
    }
}

extension Date {
    func years(from date: Date) -> Int {
        return Calendar.current.dateComponents([.year], from: self, to: date).year ?? 0
    }
}
